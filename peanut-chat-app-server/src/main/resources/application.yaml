server:
  port: ${peanut.server.port}

spring:
  application:
    name: peanut-chat-app

  profiles:
    active: dev

  data:
    redis:
      host: ${peanut.redis.host}
      port: ${peanut.redis.port}
      database: 0


  datasource:
    url: jdbc:mysql://${peanut.mysql.ip}:${peanut.mysql.port}/${peanut.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
    username: ${peanut.mysql.username}
    password: ${peanut.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 3
      maximum-pool-size: 10
      max-lifetime: 30000   #不能小于30秒，否则默认回到1800秒
  #      connection-test-query: SELECT
  elasticsearch:
    uris: ${peanut.elasticsearch.uris:http://localhost:9200}
  #    username: ${peanut.elasticsearch.username:}
  #    password: ${peanut.elasticsearch.password:}


  ai:
    openai:
      api-key: ${peanut.ai.openai.api-key}


    deepseek:
      api-key: ${peanut.ai.deepseek.api-key}

    chat:
      client:
        enabled: false


# RocketMq
rocketmq:
  name-server: ${peanut.rocketmq.name-server}
  producer:
    group: ${peanut.rocketmq.producer.group}


peanut:
  # WeChat
  wx:
    mp:
      callback: ${peanut.wx.callback}
      configs:
        - appId: ${peanut.wx.appId} # 第一个公众号的appid
          secret: ${peanut.wx.secret} # 公众号的appsecret
          token: ${peanut.wx.token} # 接口配置里的Token值


  # ws
  ws:
    port: ${peanut.im.ws.port}

  # es
  es:
    batch:
      size: 1000
      async: true
      retry:
        times: 3
    sync:
      pageSize: 1000

  # Canal配置
  canal:
    enabled: ${peanut.canal.enabled}
    server-host: ${peanut.canal.server-host}
    server-port: ${peanut.canal.server-port}
    destination: ${peanut.canal.destination}
    username: ${peanut.canal.username}
    password: ${peanut.canal.password}
    batch-size: ${peanut.canal.batch-size}
    timeout: ${peanut.canal.timeout}

    # 表配置
    tables: ${peanut.canal.tables}

    # 重试配置
    retry:
      max-retry-times: ${peanut.canal.retry.max-retry-times}
      retry-interval: ${peanut.canal.retry.retry-interval}
      exponential-backoff: ${peanut.canal.retry.exponential-backoff}
  ai:
    dashscope:
      image:
        api-key: ${peanut.ai.dashscope.image.api-key}
        model: ${peanut.ai.dashscope.image.model}

